name: e2e_tests

on: [workflow_call]    

env:
  DEKART_POSTGRES_PASSWORD: dekart
  DEKART_POSTGRES_USER: postgres
  DEKART_POSTGRES_DB: dekart
  GOOGLE_APPLICATION_CREDENTIALS: GOOGLE_APPLICATION_CREDENTIALS.json
  AWS_REGION: us-east-1
  IMAGE_PATH: /tmp/e2etest.tar
  IMAGE_CACHE_KEY: e2etest-${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Create .npmrc
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_GH_TOKEN }}" > .npmrc
          echo "@dekart-xyz:registry=https://npm.pkg.github.com" >> .npmrc
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: E2E build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          outputs: type=docker,dest=${{ env.IMAGE_PATH }}
          load: true
          tags: e2etest:latest
          target: e2etest
          cache-from: type=gha,scope=dekart
          cache-to: type=gha,mode=max,scope=dekart
      - name: Cache docker image
        uses: actions/cache@v3
        with:
          path: ${{ env.IMAGE_PATH }}
          key: ${{ env.IMAGE_CACHE_KEY }}
  bigquery:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ env.DEKART_POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.DEKART_POSTGRES_USER }}
          POSTGRES_DB: ${{ env.DEKART_POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    
        ports:
          - 5432:5432
    steps:
      - name: Create google credentials
        run: |
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > $GOOGLE_APPLICATION_CREDENTIALS
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Load Docker image from cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.IMAGE_PATH }}
          key: ${{ env.IMAGE_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Load Docker image
        run: |
          docker load --input ${{ env.IMAGE_PATH }}
          docker image ls -a        
      - name: E2E test BigQuery
        run: |
          docker run -i \
            --network="host" \
            -v $(pwd)/$GOOGLE_APPLICATION_CREDENTIALS:/dekart/$GOOGLE_APPLICATION_CREDENTIALS \
            -v /tmp/cypress/videos:/dekart/cypress/videos/ \
          	-v /tmp/cypress/screenshots:/dekart/cypress/screenshots/ \
            -e GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS \
            -e DEKART_POSTGRES_USER=$DEKART_POSTGRES_USER \
            -e DEKART_POSTGRES_PASSWORD=$DEKART_POSTGRES_PASSWORD \
            -e DEKART_POSTGRES_PORT=$DEKART_POSTGRES_PORT \
            -e DEKART_POSTGRES_HOST=localhost \
            -e DEKART_BIGQUERY_PROJECT_ID=dekart-dev \
            -e DEKART_CLOUD_STORAGE_BUCKET=dekart-dev \
            -e DEKART_ALLOW_FILE_UPLOAD=1 \
            -e TEST_SPEC=cypress/e2e/bq \
            -e CYPRESS_CI=1 \
            e2etest:latest
      - name: Upload cypress artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: bigquery
          path: /tmp/cypress
  athena:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ env.DEKART_POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.DEKART_POSTGRES_USER }}
          POSTGRES_DB: ${{ env.DEKART_POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    
        ports:
          - 5432:5432
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Load Docker image from cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.IMAGE_PATH }}
          key: ${{ env.IMAGE_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Load Docker image
        run: |
          docker load --input ${{ env.IMAGE_PATH }}
          docker image ls -a        
      - name: E2E test Athena
        run: |
          docker run -i \
            --network="host" \
            -v /tmp/cypress/videos:/dekart/cypress/videos/ \
          	-v /tmp/cypress/screenshots:/dekart/cypress/screenshots/ \
            -e DEKART_LOG_DEBUG=1 \
            -e DEKART_POSTGRES_USER=$DEKART_POSTGRES_USER \
            -e DEKART_POSTGRES_PASSWORD=$DEKART_POSTGRES_PASSWORD \
            -e DEKART_POSTGRES_PORT=$DEKART_POSTGRES_PORT \
            -e DEKART_POSTGRES_HOST=localhost \
            -e DEKART_STORAGE=S3 \
            -e DEKART_DATASOURCE=ATHENA \
            -e DEKART_CLOUD_STORAGE_BUCKET=${{ secrets.S3_BUCKET }} \
            -e DEKART_ATHENA_S3_OUTPUT_LOCATION=${{ secrets.S3_BUCKET }} \
            -e DEKART_ATHENA_CATALOG=AwsDataCatalog \
            -e AWS_REGION=$AWS_REGION \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e DEKART_ALLOW_FILE_UPLOAD=1 \
            -e DEKART_CORS_ORIGIN=http://localhost:3000 \
            -e TEST_SPEC=cypress/e2e/athena \
            -e CYPRESS_CI=1 \
            e2etest:latest
      - name: Upload cypress artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: athena
          path: /tmp/cypress
  snowflake:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ env.DEKART_POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.DEKART_POSTGRES_USER }}
          POSTGRES_DB: ${{ env.DEKART_POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    
        ports:
          - 5432:5432
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Load Docker image from cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.IMAGE_PATH }}
          key: ${{ env.IMAGE_CACHE_KEY }}
          fail-on-cache-miss: true
      - name: Load Docker image
        run: |
          docker load --input ${{ env.IMAGE_PATH }}
          docker image ls -a        
      - name: E2E test Snowflake
        run: |
          docker run -i \
            --network="host" \
            -v /tmp/cypress/videos:/dekart/cypress/videos/ \
          	-v /tmp/cypress/screenshots:/dekart/cypress/screenshots/ \
            -e DEKART_LOG_DEBUG=1 \
            -e DEKART_POSTGRES_USER=$DEKART_POSTGRES_USER \
            -e DEKART_POSTGRES_PASSWORD=$DEKART_POSTGRES_PASSWORD \
            -e DEKART_POSTGRES_PORT=$DEKART_POSTGRES_PORT \
            -e DEKART_POSTGRES_HOST=localhost \
            -e DEKART_STORAGE=S3 \
            -e DEKART_DATASOURCE=SNOWFLAKE \
            -e DEKART_CLOUD_STORAGE_BUCKET=${{ secrets.S3_BUCKET }} \
            -e AWS_REGION=$AWS_REGION \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e DEKART_ALLOW_FILE_UPLOAD=1 \
            -e DEKART_CORS_ORIGIN=http://localhost:3000 \
            -e TEST_SPEC=cypress/e2e/snowflake \
            -e CYPRESS_CI=1 \
            -e DEKART_SNOWFLAKE_ACCOUNT_ID=${{ secrets.SNOWFLAKE_ACCOUNT_ID }} \
            -e DEKART_SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }} \
            -e DEKART_SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }} \
            e2etest:latest
      - name: Upload cypress artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: snowflake
          path: /tmp/cypress